[
  {
    "id": "reverse_words_in_sentence",
    "prompt": "def reverse_words_in_sentence(s: str) -> str:\n    \"\"\"Reverse the order of words in a sentence, but not the words themselves.\"\"\"",
    "tests": "assert reverse_words_in_sentence('hello world') == 'world hello'\nassert reverse_words_in_sentence('  one   two three ') == 'three two one'\nassert reverse_words_in_sentence('') == ''"
  },
  {
    "id": "factorial_memoized",
    "prompt": "def factorial_memoized(n: int, memo: dict = None) -> int:\n    \"\"\"Return factorial of n using memoization for efficiency.\"\"\"",
    "tests": "assert factorial_memoized(5) == 120\nassert factorial_memoized(0) == 1\nassert factorial_memoized(7) == 5040"
  },
  {
    "id": "is_balanced_parentheses",
    "prompt": "def is_balanced_parentheses(s: str) -> bool:\n    \"\"\"Check if all parentheses in the input string are balanced and properly nested. Return False if there are any unmatched opening or closing parentheses. For example, '(()' should return False and '(())' should return True.\"\"\"",
    "tests": "assert is_balanced_parentheses('()')\nassert is_balanced_parentheses('(())()')\nassert not is_balanced_parentheses('(()')\nassert not is_balanced_parentheses('())(')"
  },
  {
    "id": "merge_sorted_lists",
    "prompt": "def merge_sorted_lists(a: list[int], b: list[int]) -> list[int]:\n    \"\"\"Merge two sorted lists into one sorted list.\"\"\"",
    "tests": "assert merge_sorted_lists([1,3,5],[2,4,6]) == [1,2,3,4,5,6]\nassert merge_sorted_lists([], [1,2]) == [1,2]\nassert merge_sorted_lists([], []) == []"
  },
  {
    "id": "longest_unique_substring_length",
    "prompt": "def longest_unique_substring_length(s: str) -> int:\n    \"\"\"Return the length of the longest substring without repeating characters.\"\"\"",
    "tests": "assert longest_unique_substring_length('abcabcbb') == 3\nassert longest_unique_substring_length('bbbbb') == 1\nassert longest_unique_substring_length('pwwkew') == 3\nassert longest_unique_substring_length('') == 0"
  },
  {
    "id": "binary_search",
    "prompt": "def binary_search(arr: list[int], target: int) -> int:\n    \"\"\"Return index of target in sorted arr using binary search, or -1 if not found.\"\"\"",
    "tests": "assert binary_search([1,2,3,4,5], 3) == 2\nassert binary_search([1,2,3,4,5], 6) == -1\nassert binary_search([], 3) == -1"
  },
  {
    "id": "two_sum",
    "prompt": "def two_sum(nums: list[int], target: int) -> list[int]:\n    \"\"\"Return indices of two numbers adding up to target.\"\"\"",
    "tests": "assert set(two_sum([2,7,11,15], 9)) == {0,1}\nassert set(two_sum([3,2,4], 6)) == {1,2}\nassert set(two_sum([3,3], 6)) == {0,1}"
  },
  {
    "id": "word_frequency_counter",
    "prompt": "def word_frequency_counter(s: str) -> dict:\n    \"\"\"Return a dictionary counting frequency of each word (case-insensitive).\"\"\"",
    "tests": "assert word_frequency_counter('This is this') == {'this':2, 'is':1}"
  },
  {
    "id": "matrix_rotate_90",
    "prompt": "def matrix_rotate_90(matrix: list[list[int]]) -> list[list[int]]:\n    \"\"\"Rotate a square matrix 90 degrees clockwise. To achieve this, first transpose the matrix (swap rows and columns), and then reverse the elements within each row of the transposed matrix. For example, [[1,2],[3,4]] should become [[3,1],[4,2]].\"\"\"",
    "tests": "assert matrix_rotate_90([[1,2],[3,4]]) == [[3,1],[4,2]]\nassert matrix_rotate_90([[1]]) == [[1]]"
  },
  {
    "id": "count_anagrams",
    "prompt": "def count_anagrams(words: list[str]) -> dict:\n    \"\"\"Group words that are anagrams and return counts per group.\"\"\"",
    "tests": "assert count_anagrams(['eat','tea','tan','ate','nat','bat']) == {('a','e','t'):3, ('a','n','t'):2, ('a','b','t'):1}"
  }
]
